// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VGStats.Models;

namespace VGStats.Migrations
{
    [DbContext(typeof(ModelDbContext))]
    [Migration("20190724102833_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("VGStats.Models.BadassBundleBuy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BuyerRoleType");

                    b.Property<int>("MatchId");

                    b.Property<string>("MindKey");

                    b.Property<string>("MindName");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("BadassBundles");
                });

            modelBuilder.Entity("VGStats.Models.BadassBundleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BadassBundleId");

                    b.Property<string>("ItemPath");

                    b.HasKey("Id");

                    b.HasIndex("BadassBundleId");

                    b.ToTable("BadassBundleItem");
                });

            modelBuilder.Entity("VGStats.Models.Death", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssignedRole");

                    b.Property<bool>("From_Suicide");

                    b.Property<int>("MatchId");

                    b.Property<string>("MindKey");

                    b.Property<string>("MindName");

                    b.Property<string>("SpecialRole");

                    b.Property<string>("TypePath");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Deaths");
                });

            modelBuilder.Entity("VGStats.Models.Explosion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DevestationRange");

                    b.Property<int>("HeavyImpactRange");

                    b.Property<int>("LightImpactRange");

                    b.Property<int>("MatchId");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Explosions");
                });

            modelBuilder.Entity("VGStats.Models.Faction", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("MatchId");

                    b.Property<string>("FactionName")
                        .IsRequired();

                    b.Property<string>("FactionType")
                        .IsRequired();

                    b.Property<bool>("Won");

                    b.HasKey("Id", "MatchId");

                    b.HasIndex("MatchId");

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("VGStats.Models.MalfModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MatchId");

                    b.Property<string>("ModuleBuyerKey");

                    b.Property<string>("ModuleName");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MalfModules");
                });

            modelBuilder.Entity("VGStats.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ArtifactsDiscovered");

                    b.Property<int>("BloodSpilled");

                    b.Property<int>("CratesOrdered");

                    b.Property<int>("CrewScore");

                    b.Property<int>("DataRevision");

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("MapName")
                        .IsRequired();

                    b.Property<bool>("Nuked");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("StationName")
                        .IsRequired();

                    b.Property<int>("SurvivingBorgs");

                    b.Property<int>("SurvivingHeads");

                    b.Property<int>("TechTotal");

                    b.HasKey("Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("VGStats.Models.PopulationSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MatchId");

                    b.Property<int>("PopCount");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("PopulationSnapshots");
                });

            modelBuilder.Entity("VGStats.Models.Role", b =>
                {
                    b.Property<int>("MatchRoleId");

                    b.Property<int>("MatchId");

                    b.Property<string>("FactionId")
                        .IsRequired();

                    b.Property<string>("FactionId1");

                    b.Property<int?>("FactionMatchId");

                    b.Property<string>("MindKey");

                    b.Property<string>("MindName");

                    b.Property<string>("RoleName");

                    b.Property<bool>("Won");

                    b.HasKey("MatchRoleId", "MatchId");

                    b.HasIndex("MatchId");

                    b.HasIndex("FactionId1", "FactionMatchId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("VGStats.Models.RoleObjective", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("MatchId");

                    b.Property<int>("RoleId");

                    b.Property<string>("ObjectiveDescription")
                        .IsRequired();

                    b.Property<bool>("ObjectiveSuccessful");

                    b.Property<string>("ObjectiveType")
                        .IsRequired();

                    b.Property<int?>("RoleMatchId");

                    b.Property<int?>("RoleMatchRoleId");

                    b.HasKey("Id", "MatchId", "RoleId");

                    b.HasIndex("MatchId");

                    b.HasIndex("RoleMatchRoleId", "RoleMatchId");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("VGStats.Models.Survivor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MatchId");

                    b.Property<string>("MindKey")
                        .IsRequired();

                    b.Property<string>("MindName")
                        .IsRequired();

                    b.Property<string>("MobTypepath")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("Survivors");
                });

            modelBuilder.Entity("VGStats.Models.UplinkBuy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BundlePath");

                    b.Property<string>("BuyerRole");

                    b.Property<int>("ItemCost");

                    b.Property<string>("ItemPath");

                    b.Property<int>("MatchId");

                    b.Property<string>("MindKey");

                    b.Property<string>("MindName");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("UplinkBuys");
                });

            modelBuilder.Entity("VGStats.Models.BadassBundleBuy", b =>
                {
                    b.HasOne("VGStats.Models.Match", "Match")
                        .WithMany("BadassBundles")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VGStats.Models.BadassBundleItem", b =>
                {
                    b.HasOne("VGStats.Models.BadassBundleBuy", "BadassBundle")
                        .WithMany("Items")
                        .HasForeignKey("BadassBundleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VGStats.Models.Death", b =>
                {
                    b.HasOne("VGStats.Models.Match", "Match")
                        .WithMany("Deaths")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("VGStats.Models.Location", "DeathLocation", b1 =>
                        {
                            b1.Property<int>("DeathId");

                            b1.Property<int>("X");

                            b1.Property<int>("Y");

                            b1.Property<int>("Z");

                            b1.HasKey("DeathId");

                            b1.ToTable("Deaths");

                            b1.HasOne("VGStats.Models.Death")
                                .WithOne("DeathLocation")
                                .HasForeignKey("VGStats.Models.Location", "DeathId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("VGStats.Models.MobDamage", "Damage", b1 =>
                        {
                            b1.Property<int>("DeathId");

                            b1.Property<int>("DamageBrain");

                            b1.Property<int>("DamageBrute");

                            b1.Property<int>("DamageClone");

                            b1.Property<int>("DamageFire");

                            b1.Property<int>("DamageOxygen");

                            b1.Property<int>("DamageToxin");

                            b1.HasKey("DeathId");

                            b1.ToTable("Deaths");

                            b1.HasOne("VGStats.Models.Death")
                                .WithOne("Damage")
                                .HasForeignKey("VGStats.Models.MobDamage", "DeathId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("VGStats.Models.Explosion", b =>
                {
                    b.HasOne("VGStats.Models.Match", "Match")
                        .WithMany("Explosions")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("VGStats.Models.Location", "Epicenter", b1 =>
                        {
                            b1.Property<int>("ExplosionId");

                            b1.Property<int>("X");

                            b1.Property<int>("Y");

                            b1.Property<int>("Z");

                            b1.HasKey("ExplosionId");

                            b1.ToTable("Explosions");

                            b1.HasOne("VGStats.Models.Explosion")
                                .WithOne("Epicenter")
                                .HasForeignKey("VGStats.Models.Location", "ExplosionId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("VGStats.Models.Faction", b =>
                {
                    b.HasOne("VGStats.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VGStats.Models.MalfModule", b =>
                {
                    b.HasOne("VGStats.Models.Match", "Match")
                        .WithMany("MalfModules")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VGStats.Models.PopulationSnapshot", b =>
                {
                    b.HasOne("VGStats.Models.Match", "Match")
                        .WithMany("PopulationSnapshots")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VGStats.Models.Role", b =>
                {
                    b.HasOne("VGStats.Models.Match", "Match")
                        .WithMany("Roles")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VGStats.Models.Faction", "Faction")
                        .WithMany("Roles")
                        .HasForeignKey("FactionId1", "FactionMatchId");
                });

            modelBuilder.Entity("VGStats.Models.RoleObjective", b =>
                {
                    b.HasOne("VGStats.Models.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VGStats.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleMatchRoleId", "RoleMatchId");
                });

            modelBuilder.Entity("VGStats.Models.Survivor", b =>
                {
                    b.HasOne("VGStats.Models.Match", "Match")
                        .WithMany("Survivors")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("VGStats.Models.Location", "Location", b1 =>
                        {
                            b1.Property<int>("SurvivorId");

                            b1.Property<int>("X");

                            b1.Property<int>("Y");

                            b1.Property<int>("Z");

                            b1.HasKey("SurvivorId");

                            b1.ToTable("Survivors");

                            b1.HasOne("VGStats.Models.Survivor")
                                .WithOne("Location")
                                .HasForeignKey("VGStats.Models.Location", "SurvivorId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("VGStats.Models.MobDamage", "Damage", b1 =>
                        {
                            b1.Property<int>("SurvivorId");

                            b1.Property<int>("DamageBrain");

                            b1.Property<int>("DamageBrute");

                            b1.Property<int>("DamageClone");

                            b1.Property<int>("DamageFire");

                            b1.Property<int>("DamageOxygen");

                            b1.Property<int>("DamageToxin");

                            b1.HasKey("SurvivorId");

                            b1.ToTable("Survivors");

                            b1.HasOne("VGStats.Models.Survivor")
                                .WithOne("Damage")
                                .HasForeignKey("VGStats.Models.MobDamage", "SurvivorId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("VGStats.Models.UplinkBuy", b =>
                {
                    b.HasOne("VGStats.Models.Match", "Match")
                        .WithMany("UplinkBuys")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
